#include <iostream>
#include <windows.h>
#include <math.h>

using namespace std;


class Complex_number
{
private:
	int a, b;
	double Module;
	int *result = new int[2];	// 0 элемент - результат для вещественной части, 1 элемент - результат для мнимой части					
	
	friend void Scan(Complex_number& scan, char ch);			// Дружественная функция
	friend void Print(Complex_number& print, char ch);		// Дружественная функция
	friend void ModuleVect(Complex_number& valAB);	// Дружественная функция
	friend void PrModVect(Complex_number& valAB, char ch);	// Дружественная функция

public:
	Complex_number()								// Конструктор по умолчанию
	{
		cout << "Вызвался конструктор по умолчанию\t\t" << this << endl;
	}
	Complex_number(int a)							// Конструктор с параметрами
	{
		cout << "Вызвался конструктор с параметрами\t\t" << this << endl;

		this->a = a;
	}
	Complex_number(int a, int b)					// Конструктор с параметрами
	{
		cout << "Вызвался конструктор с параметрами\t\t" << this << endl;

		this->a = a;
		this->b = b;
	}
	Complex_number(const Complex_number& other)		// Конструктор копирования
	{
		cout << "Вызвался конструктор копирования\t\t" << this << endl;

		a = other.a;
		b = other.b;
		result[0] = other.result[0];
		result[1] = other.result[1];
	}




	void Set_a(int value_a)		// Сеттер a
	{
		a = value_a;
	}
	void Set_b(int value_b)		// Сеттер b
	{
		b = value_b;
	}
	int Get_a()					// Геттер a 
	{
		return a;
	}
	int Get_b()					// Геттер b
	{
		return b;
	}




	bool operator == (const Complex_number& other)	// ==
	{
		if (Module == other.Module)
		{
			cout << "Числа равны" << endl;
			return true;
		}
		else return false;
	}
	bool operator != (const Complex_number& other)	// !=
	{
		if (Module != other.Module)
		{
			cout << "Числа не равны" << endl;
			return true;
		}
		else  return false;
	}
	bool operator < (const Complex_number& other)	// <
	{
		if (Module < other.Module)
		{
			cout << "Число A < числа B" << endl;
			return true;
		}
		else return false;
	}
	bool operator > (const Complex_number& other)	// >
	{
		if (Module > other.Module)
		{
			cout << "Число A > числа B" << endl;
			return true;
		}
		else return false;
	}

	void operator = (const Complex_number& other)	// =
	{
		cout << "Вызвался оператор =\t\t\t\t" << this << endl;

		a = other.a;
		b = other.b;
	}
	int operator + (const Complex_number& other)	// +
	{
		cout << "Вызвался оператор +\t\t\t\t" << this << endl;

		result[0] = a + other.a;

		return result[0];
	}
	int *operator * (const Complex_number& other)	// *
	{
		cout << "Вызвался оператор *\t\t\t\t" << this << endl;

		result[0] = a * other.a + b * other.b * (-1);	// Результат для вещественной части
		result[1] = a * other.b + b * other.a;			// Результат для мнимой части

		return result;
	}
	int operator - (const Complex_number& other)	// -
	{
		cout << "Вызвался оператор -\t\t\t\t" << this << endl;

		result[0] = a - other.a;

		return result[0];
	}




	~Complex_number()							// Деструктор
	{
		cout << "Вызвался деструктор\t\t\t" << this << endl;
	}
};

void Scan(Complex_number& scan, char ch)		// Дружественная функция ввода числа
{
	cout << "Ввод вещественного числа " << ch << ":\t"; cin >> scan.a;
	cout << "Ввод мнимой части:\t\t"; cin >> scan.b;
}
void Print(Complex_number& print, char ch)	// Дружественная функция вывода числа
{
	if (print.b > 0) cout << "Вывод числа " << ch << ":\t\t\t" << print.a << " + " << print.b << "*i" << endl;
	else if (print.b == 0) cout << "Вывод числа " << ch <<":\t\t\t" << print.a << endl;
	else cout << "Вывод числа " << ch << ":\t\t\t" << print.a << print.b << "*i" << endl;
}
void PrintRes1(int res)				// 
{
	cout << "Результат:\t\t\t" << res;
}
void PrintRes2(int res)				//
{
	if (res > 0) cout << " + " << res << "*i" << endl;
	else if (res == 0) cout << endl;
	else cout << res << "*i" << endl;
}
void PrintResM_i(int *res)			// 
{
	if (res[1] > 0) cout << "Результат:\t\t\t" << res[0] << " + " << res[1] << "*i" << endl;
	else if (res[1] == 0) cout << "Результат:\t\t\t" << res[0] << endl;
	else cout << "Результат:\t\t\t" << res[0] << res[1] << "*i" << endl;
	
}
void PrintOpResults(Complex_number& valA, Complex_number& valB, char &_A, char &_B)	// Вывод операций 
{
	int* result1 = new int[2];					// Результат операций + * - =
	char _C = _A;

	result1[0] = valA.operator+(valB);
	cout << _A << " + " << _B << endl;
	PrintRes1(result1[0]);
	result1[1] = valA.Get_b() + valB.Get_b();
	PrintRes2(result1[1]);

	cout << endl;

	result1 = valA.operator*(valB);
	cout << _A << " * " << _B << endl;
	/*result2 = (valA.Get_b() * valB.Get_b()) * (-1) + result1;*/
	PrintResM_i(result1);

	cout << endl;

	result1[0] = valA.operator-(valB);
	cout << _A << " - " << _B << endl;
	PrintRes1(result1[0]);
	result1[1] = valA.Get_b() - valB.Get_b();
	PrintRes2(result1[1]);

	cout << endl;

	valA.operator=(valB);
	cout << _A << " = " << _B << endl;
	Print(valA, _A);

	_A = _B;
	_B = _C;
}
void ModuleVect(Complex_number& valAB)	// Вычисление модуля комп. чис.
{
	valAB.Module = sqrt(valAB.a * valAB.a + valAB.b * valAB.b);
}
void PrModVect(Complex_number& valAB, char ch)	// Вывод || Модуль комплексного числа есть длина вектора
{
	cout << "Модуль числа " << ch << ":\t\t" << valAB.Module << endl;
}


int main()
{
	setlocale(LC_ALL, "ru");
		
	Complex_number A;				// Конструктор по умолчанию A
	Complex_number B;				// Конструктор по умолчанию B
	char ChA = 'A'; char ChB = 'B';

	Scan(A, ChA); Print(A, ChA);
	cout << endl;
	Scan(B, ChB); Print(B, ChB);
	int saveA_a = A.Get_a();		// Запоминаем число A_a
	int saveA_b = A.Get_b();		// Запоминаем число A_b
	int saveB_a = B.Get_a();		// Запоминаем число B_a
	int saveB_b = B.Get_b();		// Запоминаем число B_b

	cout << endl << "######################" << endl << endl;
	PrintOpResults(A, B, ChA, ChB);
	cout << endl << "######################" << endl << endl; A.Set_a(saveA_a); A.Set_b(saveA_b);
	PrintOpResults(B, A, ChA, ChB);
	cout << endl << "######################" << endl << endl; B.Set_a(saveB_a); B.Set_b(saveB_b);
	bool bl; cout << "Очистить? "; cin >> bl;
	if (bl) system("CLS");


	Complex_number Par_A(4, 2);	// Конструктор с параметрами Par_A
	Complex_number Par_B(3, 5);	// Конструктор с параметрами Par_B
	saveA_a = Par_A.Get_a();		// Запоминаем число A_a
	saveA_b = Par_A.Get_b();		// Запоминаем число A_b
	saveB_a = Par_B.Get_a();		// Запоминаем число B_a
	saveB_b = Par_B.Get_b();		// Запоминаем число B_b
	ChA = 'A'; ChB = 'B';

	Print(Par_A, ChA);
	cout << endl;
	Print(Par_B, ChB);

	cout << endl << "######################" << endl << endl;
	PrintOpResults(Par_A, Par_B, ChA, ChB);
	cout << endl << "######################" << endl << endl; Par_A.Set_a(saveA_a); Par_A.Set_b(saveA_b);
	PrintOpResults(Par_B, Par_A, ChA, ChB);
	cout << endl << "######################" << endl << endl; Par_B.Set_a(saveB_a); Par_B.Set_b(saveB_b);
	cout << "Очистить? "; cin >> bl;
	if (bl) system("CLS");


	Complex_number Cop_A(B);	// Конструктор копирования Cop_B
	ChA = 'A'; ChB = 'B';
	Print(Cop_A, ChA);

	cout << endl << "######################" << endl << endl;
	PrintOpResults(Cop_A, B, ChA, ChB);
	cout << endl << "######################" << endl << endl;
	PrintOpResults(B, Cop_A, ChA, ChB);
	cout << endl << "######################" << endl << endl;
	cout << "Очистить? "; cin >> bl;
	if (bl) system("CLS");

	ChA = 'A'; ChB = 'B';
	cout << "Числа для сравнения: " << endl;
	Print(A, ChA); Print(B, ChB);
	ModuleVect(A); ModuleVect(B);
	cout << endl;
	PrModVect(A, ChA); PrModVect(B, ChB);

	cout << endl;
	A.operator==(B);
	A.operator!=(B);
	A.operator<(B);
	A.operator>(B);

	

	cout << endl;
	return 0;
}